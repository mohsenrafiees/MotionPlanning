==6333== Memcheck, a memory error detector
==6333== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==6333== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==6333== Command: ./planner_program
==6333== 
==6333== Invalid read of size 8
==6333==    at 0x1476DD: _object* matplotlibcpp::detail::get_array<double>(std::vector<double, std::allocator<double> > const&) [clone .isra.0] (matplotlibcpp.h:373)
==6333==    by 0x147C0E: bool matplotlibcpp::scatter<double, double>(std::vector<double, std::allocator<double> > const&, std::vector<double, std::allocator<double> > const&, double, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&) [clone .isra.0] (matplotlibcpp.h:1002)
==6333==    by 0x14A3EB: PlottingUtils::plotPath(std::vector<Eigen::Matrix<double, 3, 1, 0, 3, 1>, std::allocator<Eigen::Matrix<double, 3, 1, 0, 3, 1> > > const&, OccupancyGrid const&, double) (plotting_utils.cpp:117)
==6333==    by 0x112097: main (main.cpp:224)
==6333==  Address 0x10 is not stack'd, malloc'd or (recently) free'd
==6333== 
==6333== 
==6333== Process terminating with default action of signal 11 (SIGSEGV)
==6333==  Access not within mapped region at address 0x10
==6333==    at 0x1476DD: _object* matplotlibcpp::detail::get_array<double>(std::vector<double, std::allocator<double> > const&) [clone .isra.0] (matplotlibcpp.h:373)
==6333==    by 0x147C0E: bool matplotlibcpp::scatter<double, double>(std::vector<double, std::allocator<double> > const&, std::vector<double, std::allocator<double> > const&, double, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&) [clone .isra.0] (matplotlibcpp.h:1002)
==6333==    by 0x14A3EB: PlottingUtils::plotPath(std::vector<Eigen::Matrix<double, 3, 1, 0, 3, 1>, std::allocator<Eigen::Matrix<double, 3, 1, 0, 3, 1> > > const&, OccupancyGrid const&, double) (plotting_utils.cpp:117)
==6333==    by 0x112097: main (main.cpp:224)
==6333==  If you believe this happened as a result of a stack
==6333==  overflow in your program's main thread (unlikely but
==6333==  possible), you can try to increase the size of the
==6333==  main thread stack using the --main-stacksize= flag.
==6333==  The main thread stack size used in this run was 8388608.
==6333== 
==6333== HEAP SUMMARY:
==6333==     in use at exit: 35,777,478 bytes in 92,712 blocks
==6333==   total heap usage: 246,178 allocs, 153,466 frees, 545,584,523 bytes allocated
==6333== 
==6333== LEAK SUMMARY:
==6333==    definitely lost: 4,792 bytes in 8 blocks
==6333==    indirectly lost: 69,307 bytes in 2,330 blocks
==6333==      possibly lost: 15,466,296 bytes in 584 blocks
==6333==    still reachable: 20,237,083 bytes in 89,790 blocks
==6333==         suppressed: 0 bytes in 0 blocks
==6333== Rerun with --leak-check=full to see details of leaked memory
==6333== 
==6333== For lists of detected and suppressed errors, rerun with: -s
==6333== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
